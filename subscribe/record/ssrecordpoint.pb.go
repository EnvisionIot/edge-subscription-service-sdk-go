// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssrecordpoint.proto

package record

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SSRecordPoint struct {
	OrgId                *string  `protobuf:"bytes,1,req,name=orgId" json:"orgId,omitempty"`
	ModelId              *string  `protobuf:"bytes,2,req,name=modelId" json:"modelId,omitempty"`
	AssetId              *string  `protobuf:"bytes,3,req,name=assetId" json:"assetId,omitempty"`
	CollectDeviceId      *string  `protobuf:"bytes,4,req,name=collectDeviceId" json:"collectDeviceId,omitempty"`
	PointId              *string  `protobuf:"bytes,5,req,name=pointId" json:"pointId,omitempty"`
	Time                 *int64   `protobuf:"varint,6,req,name=time" json:"time,omitempty"`
	Value                *string  `protobuf:"bytes,7,req,name=value" json:"value,omitempty"`
	Quality              *int32   `protobuf:"varint,8,req,name=quality" json:"quality,omitempty"`
	Dq                   *int64   `protobuf:"varint,9,req,name=dq" json:"dq,omitempty"`
	ModelPath            *string  `protobuf:"bytes,10,req,name=modelPath" json:"modelPath,omitempty"`
	PolicyType           *string  `protobuf:"bytes,11,req,name=policyType" json:"policyType,omitempty"`
	SignalType           *string  `protobuf:"bytes,12,req,name=signalType" json:"signalType,omitempty"`
	HasQuality           *bool    `protobuf:"varint,13,req,name=hasQuality" json:"hasQuality,omitempty"`
	DataType             *string  `protobuf:"bytes,14,req,name=dataType" json:"dataType,omitempty"`
	SubDataType          *string  `protobuf:"bytes,15,req,name=subDataType" json:"subDataType,omitempty"`
	Attr                 *string  `protobuf:"bytes,16,opt,name=attr" json:"attr,omitempty"`
	UsingOem             *int32   `protobuf:"varint,17,opt,name=usingOem" json:"usingOem,omitempty"`
	OemTime              *int64   `protobuf:"varint,18,opt,name=oemTime" json:"oemTime,omitempty"`
	PointType            *int32   `protobuf:"varint,19,opt,name=pointType" json:"pointType,omitempty"`
	Edq                  *int32   `protobuf:"varint,20,opt,name=edq" json:"edq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSRecordPoint) Reset()         { *m = SSRecordPoint{} }
func (m *SSRecordPoint) String() string { return proto.CompactTextString(m) }
func (*SSRecordPoint) ProtoMessage()    {}
func (*SSRecordPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_800bd5a3ee647fee, []int{0}
}

func (m *SSRecordPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSRecordPoint.Unmarshal(m, b)
}
func (m *SSRecordPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSRecordPoint.Marshal(b, m, deterministic)
}
func (m *SSRecordPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSRecordPoint.Merge(m, src)
}
func (m *SSRecordPoint) XXX_Size() int {
	return xxx_messageInfo_SSRecordPoint.Size(m)
}
func (m *SSRecordPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_SSRecordPoint.DiscardUnknown(m)
}

var xxx_messageInfo_SSRecordPoint proto.InternalMessageInfo

func (m *SSRecordPoint) GetOrgId() string {
	if m != nil && m.OrgId != nil {
		return *m.OrgId
	}
	return ""
}

func (m *SSRecordPoint) GetModelId() string {
	if m != nil && m.ModelId != nil {
		return *m.ModelId
	}
	return ""
}

func (m *SSRecordPoint) GetAssetId() string {
	if m != nil && m.AssetId != nil {
		return *m.AssetId
	}
	return ""
}

func (m *SSRecordPoint) GetCollectDeviceId() string {
	if m != nil && m.CollectDeviceId != nil {
		return *m.CollectDeviceId
	}
	return ""
}

func (m *SSRecordPoint) GetPointId() string {
	if m != nil && m.PointId != nil {
		return *m.PointId
	}
	return ""
}

func (m *SSRecordPoint) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *SSRecordPoint) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *SSRecordPoint) GetQuality() int32 {
	if m != nil && m.Quality != nil {
		return *m.Quality
	}
	return 0
}

func (m *SSRecordPoint) GetDq() int64 {
	if m != nil && m.Dq != nil {
		return *m.Dq
	}
	return 0
}

func (m *SSRecordPoint) GetModelPath() string {
	if m != nil && m.ModelPath != nil {
		return *m.ModelPath
	}
	return ""
}

func (m *SSRecordPoint) GetPolicyType() string {
	if m != nil && m.PolicyType != nil {
		return *m.PolicyType
	}
	return ""
}

func (m *SSRecordPoint) GetSignalType() string {
	if m != nil && m.SignalType != nil {
		return *m.SignalType
	}
	return ""
}

func (m *SSRecordPoint) GetHasQuality() bool {
	if m != nil && m.HasQuality != nil {
		return *m.HasQuality
	}
	return false
}

func (m *SSRecordPoint) GetDataType() string {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return ""
}

func (m *SSRecordPoint) GetSubDataType() string {
	if m != nil && m.SubDataType != nil {
		return *m.SubDataType
	}
	return ""
}

func (m *SSRecordPoint) GetAttr() string {
	if m != nil && m.Attr != nil {
		return *m.Attr
	}
	return ""
}

func (m *SSRecordPoint) GetUsingOem() int32 {
	if m != nil && m.UsingOem != nil {
		return *m.UsingOem
	}
	return 0
}

func (m *SSRecordPoint) GetOemTime() int64 {
	if m != nil && m.OemTime != nil {
		return *m.OemTime
	}
	return 0
}

func (m *SSRecordPoint) GetPointType() int32 {
	if m != nil && m.PointType != nil {
		return *m.PointType
	}
	return 0
}

func (m *SSRecordPoint) GetEdq() int32 {
	if m != nil && m.Edq != nil {
		return *m.Edq
	}
	return 0
}

type SSRecordPoints struct {
	Points               []*SSRecordPoint `protobuf:"bytes,1,rep,name=points" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SSRecordPoints) Reset()         { *m = SSRecordPoints{} }
func (m *SSRecordPoints) String() string { return proto.CompactTextString(m) }
func (*SSRecordPoints) ProtoMessage()    {}
func (*SSRecordPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_800bd5a3ee647fee, []int{1}
}

func (m *SSRecordPoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSRecordPoints.Unmarshal(m, b)
}
func (m *SSRecordPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSRecordPoints.Marshal(b, m, deterministic)
}
func (m *SSRecordPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSRecordPoints.Merge(m, src)
}
func (m *SSRecordPoints) XXX_Size() int {
	return xxx_messageInfo_SSRecordPoints.Size(m)
}
func (m *SSRecordPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_SSRecordPoints.DiscardUnknown(m)
}

var xxx_messageInfo_SSRecordPoints proto.InternalMessageInfo

func (m *SSRecordPoints) GetPoints() []*SSRecordPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

func init() {
	proto.RegisterType((*SSRecordPoint)(nil), "ssrecorddatasubscribe.SSRecordPoint")
	proto.RegisterType((*SSRecordPoints)(nil), "ssrecorddatasubscribe.SSRecordPoints")
}

func init() { proto.RegisterFile("ssrecordpoint.proto", fileDescriptor_800bd5a3ee647fee) }

var fileDescriptor_800bd5a3ee647fee = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x41, 0x6e, 0xdb, 0x30,
	0x10, 0xac, 0x24, 0x3b, 0xb1, 0xd7, 0x89, 0x93, 0x32, 0x69, 0xb1, 0x28, 0x8a, 0x82, 0x08, 0x7a,
	0xe0, 0xc9, 0x87, 0x9e, 0x7b, 0x0a, 0x72, 0xd1, 0xa5, 0x75, 0x99, 0x7c, 0x80, 0x16, 0xb7, 0x0e,
	0x01, 0xc9, 0xb4, 0x45, 0x2a, 0x80, 0x5f, 0xd4, 0x6f, 0x16, 0x5c, 0x59, 0xb1, 0x53, 0xf4, 0xb6,
	0x33, 0xc3, 0x19, 0xaf, 0x47, 0x0b, 0x37, 0x21, 0xb4, 0x54, 0xf9, 0xd6, 0x6e, 0xbd, 0xdb, 0xc4,
	0xc5, 0xb6, 0xf5, 0xd1, 0x8b, 0x0f, 0x03, 0x69, 0x4d, 0x34, 0xa1, 0x5b, 0x85, 0xaa, 0x75, 0x2b,
	0xba, 0xfb, 0x33, 0x82, 0xcb, 0xc7, 0x47, 0xcd, 0xca, 0x32, 0x3d, 0x17, 0xb7, 0x30, 0xf6, 0xed,
	0xba, 0xb4, 0x98, 0xc9, 0x5c, 0x4d, 0x75, 0x0f, 0x04, 0xc2, 0x79, 0xe3, 0x2d, 0xd5, 0xa5, 0xc5,
	0x9c, 0xf9, 0x01, 0x26, 0xc5, 0x84, 0x40, 0xb1, 0xb4, 0x58, 0xf4, 0xca, 0x01, 0x0a, 0x05, 0x57,
	0x95, 0xaf, 0x6b, 0xaa, 0xe2, 0x03, 0xbd, 0xb8, 0x8a, 0x4a, 0x8b, 0x23, 0x7e, 0xf1, 0x2f, 0x9d,
	0x32, 0x78, 0xd7, 0xd2, 0xe2, 0xb8, 0xcf, 0x38, 0x40, 0x21, 0x60, 0x14, 0x5d, 0x43, 0x78, 0x26,
	0x73, 0x55, 0x68, 0x9e, 0xd3, 0x86, 0x2f, 0xa6, 0xee, 0x08, 0xcf, 0xfb, 0x0d, 0x19, 0xa4, 0x8c,
	0x5d, 0x67, 0x6a, 0x17, 0xf7, 0x38, 0x91, 0xb9, 0x1a, 0xeb, 0x01, 0x8a, 0x39, 0xe4, 0x76, 0x87,
	0x53, 0x4e, 0xc8, 0xed, 0x4e, 0x7c, 0x86, 0x29, 0x2f, 0xbf, 0x34, 0xf1, 0x19, 0x81, 0x33, 0x8e,
	0x84, 0xf8, 0x02, 0xb0, 0xf5, 0xb5, 0xab, 0xf6, 0x4f, 0xfb, 0x2d, 0xe1, 0x8c, 0xe5, 0x13, 0x26,
	0xe9, 0xc1, 0xad, 0x37, 0xa6, 0x66, 0xfd, 0xa2, 0xd7, 0x8f, 0x4c, 0xd2, 0x9f, 0x4d, 0xf8, 0x75,
	0x58, 0xe5, 0x52, 0xe6, 0x6a, 0xa2, 0x4f, 0x18, 0xf1, 0x09, 0x26, 0xe9, 0x13, 0xb0, 0x7b, 0xce,
	0xee, 0x57, 0x2c, 0x24, 0xcc, 0x42, 0xb7, 0x7a, 0x18, 0xe4, 0x2b, 0x96, 0x4f, 0xa9, 0xd4, 0x87,
	0x89, 0xb1, 0xc5, 0x6b, 0x99, 0xa9, 0xa9, 0xe6, 0x39, 0x25, 0x76, 0xc1, 0x6d, 0xd6, 0x3f, 0xa9,
	0xc1, 0xf7, 0x32, 0x53, 0x63, 0xfd, 0x8a, 0x53, 0x2b, 0x9e, 0x9a, 0xa7, 0x54, 0xa1, 0x90, 0x99,
	0x2a, 0xf4, 0x00, 0x53, 0x0b, 0x5c, 0x32, 0xff, 0xd2, 0x0d, 0xdb, 0x8e, 0x84, 0xb8, 0x86, 0x82,
	0xec, 0x0e, 0x6f, 0x99, 0x4f, 0xe3, 0xdd, 0x0f, 0x98, 0xbf, 0x39, 0x94, 0x20, 0xbe, 0xc3, 0x19,
	0x1b, 0x02, 0x66, 0xb2, 0x50, 0xb3, 0x6f, 0x5f, 0x17, 0xff, 0xbd, 0xb1, 0xc5, 0x1b, 0x9b, 0x3e,
	0x78, 0xee, 0x15, 0x7c, 0xac, 0x7c, 0xd3, 0x5f, 0xe7, 0xaa, 0xfb, 0xbd, 0x58, 0xd3, 0x86, 0x5a,
	0x13, 0xc9, 0xde, 0x5f, 0x0c, 0x86, 0xf4, 0xaf, 0x97, 0xef, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xde, 0xe7, 0x63, 0x99, 0xd0, 0x02, 0x00, 0x00,
}
